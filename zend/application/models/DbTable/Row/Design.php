<?php

class Application_Model_DbTable_Row_Design extends Zend_Db_Table_Row_Abstract
{

    /**
     * Returns a rowset of design_steps for the given design
     * 
     * @return Zend_Db_Table_Rowset
     */
    public function getDesignSteps() {
        return($this->findDependentRowset('Application_Model_DbTable_DesignSteps'));
    }

    /**
     * Returns a design_step row that represents the last step in the design
     * 
     * @return Zend_Db_Table_Row_DesignStep
     */
    public function getLastDesignStep() {

        $dbDesignSteps = new Application_Model_DbTable_DesignSteps();
        $select = $dbDesignSteps->select();
        $select->where('design_id = ?', $this->design_id)
               ->where('step_index = (select max(step_index) from design_steps where design_id = ?)', $this->design_id);

        return ($dbDesignSteps->fetchAll($select)->current());

    }

    /**
     * Returns a single Library row for the given design record
     * 
     * @return Zend_Db_Table_Row_Library
     */
    public function getLibrary() {
        return($this->findParentRow('Application_Model_DbTable_Libraries'));
    }


    /**
     * Returns a rowset of parts that is considered the terminals for the design
     * 
     */
    public function getDesignParts() {

        $step = $this->getLastDesignStep();
        return($step->getDesignStepParts());

    }
    
    /**
     * Returns a string that represents a concatenation of the sequences for each 
     * part that makes up the design.  If the user hasn't chosen a part for one
     * of the categories, the sequence will be replaced with a dash ("-")
     */
    public function generateSequence() {
        $parts = $this->getDesignParts(); 
        $sequence = "";
        foreach ($parts as $design_part) {
            if ($design_part->part_id == "") {
                $sequence .= "-";
            } else {
                $part = $design_part->findParentRow('Application_Model_DbTable_Parts');
                $sequence .= strtolower($part->segment);
            }

        }

        return ($sequence);
        
    }

    /**
     * Will return true if the saved sequence in the design matches the sequence
     * generated by concatenating the sequence from each part
     * 
     * @return boolean
     */
    public function validateSequence() {
        return ($this->sequence == $this->generateSequence());
    }

    /**
     * Checks the generated sequence to see if there are any dashes, which indicates
     * a part that hasn't been selected
     * 
     * @return boolean
     */
    public function isUnderConstruction() {

        if (strrpos($this->sequence, "-") === false) {
            return (false);
        } else {
            return (true);
        }
    }

    /**
     * This function writes sequences to a tab-delimited format.  Certain assumptions are made:
     *   1. $sequences is an array of arrays, each element array having elements "identifier" and "sequence"
     *   2. This assumes that the elements in the sequences.identifier are separated by pipes (so all that needs to be done is to replace the pipes with tabs
     *   3. The sequence will be displayed all on one line.
     *
     * @return string
     */
    public function getTabDelimitedExport() {
        
        // ensure that the name and description don't include any tabs
        $name = str_replace(chr(9), " ", $this->name);
        $description = str_replace(chr(9), " ", $this->description);

        return ($name . chr(9) . $description . chr(9) . str_replace(Array(" ", PHP_EOL), "", strtoupper(Genocad_Utilities_Designs_ReverseComplement::sequence_reverse($this->sequence))) . PHP_EOL);

    }


    /**
     * This function writes sequences to the fasta file format.  Certain assumptions are made:
     *   1. This assumes the fasta definition line per sequence is of the form "> lcl|<identifier> where <identifier> maps to the "identifier" subelement from the array above
     *   2. The sequence will be displayed 80 characters to a line and will be upper case (per the NCBI guidance)
     *
     * @return string
     */
    public function getFastaExport() {
    	
    	$reverseSequence = strtoupper(Genocad_Utilities_Designs_ReverseComplement::sequence_reverse(($this->sequence)));
    	
    	$sequenceArray = Genocad_Utilities_Designs_ReverseComplement::sequence_divide($this->name, $reverseSequence);
    	
    	foreach ($sequenceArray as $sequence) {
    		$lines = explode("|", $sequence);
    		$name = $lines[0];
    		if ($lines[1] == "design"){
    			$lineOutput = "";
    		} else {
    			$lineOutput = "|pos: ".$lines[1]." to ".($lines[1] + strlen($lines[2]) - 1)." of ".$this->name;	
    		}
    		$returnString .= '>lcl|' . $lines[0] . $lineOutput . PHP_EOL . chunk_split($lines[2], 80, PHP_EOL); 
    	} 

    	return $returnString;
        //return ('>lcl|'. $this->name . PHP_EOL . chunk_split(strtoupper(Genocad_Utilities_Designs_ReverseComplement::sequence_reverse(($this->sequence))), 80, PHP_EOL));
     
    }


    /**
     * This function writes sequences in either the fasta file or the tab-delimited format.  Assumptions that are made:
     *   1. If Fasta Format is requested, the type variable will be set to "fasta" and Tab-delimited is a type of "tab"
     *   2. Format for the FASTA definition line is ">lcl|design name" and the sequence is rendered 80 characters per line in upper case (per the NCBI guidance)
     *   3. Format for the Tab Delimited format is "name<tab>description<tab>sequence" 
     */
    public function getExport($type){
    	$name = trim(str_replace(chr(9), " ", $this->name));
    	$description = trim(str_replace(chr(9), " ", $this->description));
    	$sequence = strtoupper(Genocad_Utilities_Designs_ReverseComplement::sequence_reverse(trim($this->sequence)));
    	$sequenceArray = Genocad_Utilities_Designs_ReverseComplement::sequence_divide($name, $sequence);
    	$returnString ="";
    	
    	foreach ($sequenceArray as $sequence) {
    		$lines = explode("|", $sequence);
    		$name = $lines[0];
    		if ($lines[1] == "design"){
    			if ($type == "fasta") {
    				$lineOutput = "";
    			} else {
    				$lineOutput = $description;
    			}	
    		} else {
    			if ($type == "fasta") {
    				$lineOutput = "| pos: ".($lines[1] + 1)." to ".(($lines[1] + 1) + strlen($lines[2]) - 1)." of ".$this->name;
    			} else {
    				$lineOutput = "pos: ".($lines[1] + 1)." to ".(($lines[1] + 1) + strlen($lines[2]) - 1)." of ".$this->name;
    			}		
    		}
    		if ($type == "fasta"){
    			$returnString .= '>lcl|' . $lines[0] . $lineOutput . PHP_EOL . chunk_split($lines[2], 80, PHP_EOL);
    		} else {
    			$returnString .= $name . chr(9) . $lineOutput . chr(9) . str_replace(Array(" ", PHP_EOL, chr(9)), "", $lines[2]).PHP_EOL;
    		}	 
    	} 
    	    	
    	return $returnString;
    }
    
    /**
     * 
     * 
     * 
     */
    public function validate() {

        $grammar = $this->getLibrary()->getGrammar();
        $sequence_match = $this->validateSequence();
        $under_construction =  $this->isUnderConstruction();

        $is_valid = true;
        $message = "";
        $run_compiler = (boolean) Zend_Registry::get('config')->design->run_validator;

        if ($under_construction) {
            $run_compiler = false;
        }

        if ($run_compiler) {
            // call the compiler 
	       $res=Genocad_Utilities_Designs_Compiler::doValidationCompilation($grammar->grammar_id, $this->getLibrary()->library_id, $this->generateSequence());
	       if ($res){$is_valid = true;}else{$is_valid = false;}
        }

        // check the return from the compiler which will have set some variables
        if (($grammar->is_compilable == 0) && !($under_construction)){

            // the grammar could not be compiled, but the sequence could still be checked
            if ($sequence_match) {
                if ($this->is_validated != 0) {
                    // Was some other status -- needed revalidation
                    $this->is_validated = 0;
                }
                $message = "This design is associated with grammar ".$grammar->name." which cannot be validated against the compiler.  There have been no underlying changes to the sequence, however.";
            } else {
                if ($this->is_validated != -3) {
                    // Was some other status -- needed revalidation
                    $this->is_validated = -3;
                }
                $message = "This design is associated with grammar ".$grammar->name." which cannot be validated against the compiler.  The sequence was checked for consistency, however, and underlying changes to the parts have altered the sequence of your design. ".  
                        " If you save your design, your old sequence will be overwritten with the new one, but until then you can still export the old sequence from the My Designs page.";
            }
        } elseif ($is_valid && $sequence_match){
            // This is valid, but is it under construction or not?
            if ($under_construction) {
                if ($this->is_validated == -2) {
                    // no need to update -- still under construction
                    $message = "Under construction -- still consistent";
                } else {
                    $this->is_validated = -2;
                    $message = "Under construction -- underlying parts have changed, but sequence is consistent";
                }
            } else {            
                if ($this->is_validated != 1) {
                    // sequence is valid, where it was not before
                    $this->is_validated = 1;
                }   
                $message = "Design is valid";
            } 
        } elseif ($is_valid && !($sequence_match))  {
            // The stored sequence does not match the constructed sequence -- this is an unlikely scenario
            // but could happen -- put in caution status
            if ($this->is_validated != -3) {
                $this->is_validated = -3;       
            }
            $message = "Your design is valid, but underlying changes to the parts have changed the sequence of your design. ".
                " If you save your design, your old sequence will be overwritten with the new one, but until then you can still export the old sequence from the My Designs page.";
        } elseif (!($is_valid)) {
            // invalid
            if ($this->is_validated != -1) {
                $this->is_validated = -1;           
            }
            $message = "Design is invalid.";
        } 

        $this->save();

        return($message);
        
    }

    /**
     * Returns an array with the title of the current validation status, as well
     * as the name of the image that represents that status
     * 
     * @return array (title, image)
     */
    public function getValidationStatus() {

        switch ($this->is_validated) {
            case -3:
                $alt = 'Sequence mismatch';
                $img = 'caution.png';
                break;
            case -2:
                $alt = 'Under development';
                $img = 'under_development.png';
                break;
            case -1:
                $alt = 'Invalid design';
                $img = 'invalid_design.png';
                break;
            case 0:
                $alt = 'Needs validation';
                $img = 'design_needs_validation.png';
                break;
            case 1:
                $alt = 'Valid design';
                $img = 'valid_design.png';
                break;
            default:
                $alt = 'Needs validation';
                $img = 'design_needs_validation.png';
                break;
        }

        return (array('title'=>$alt, 'image'=>$img));

    }

    /**
     * Returns true if the given design is a Public Design, meaning it's available
     * to be viewed by all users
     * 
     * @returns boolean
     */
    public function isPublicDesign() {
        return ($this->user_id == 0 || $this->is_public == 1);
    }
    
}
